using UnityEngine;
using System.Collections;
using System;
using System.Collections.Generic;
using UnityEngine.SceneManagement;



/*****************************************************
 *             GAME DISPLAY                          *
 *    This script creates and destroys the grid of   *
 *    sprites that make up a Vault level.            *
 * **************************************************/

 

public class GameDisplay : MonoBehaviour
{
    public static int levelnumber; // THe level the player is on in the current game
 
    // These are the boundary edges of the grid board 
    public static int StartX;
    public static int StartY;
   
    public LevelDatabase ldatabase; // THe database generated by the Game Creator
    
    RuleDisplay ruleDisplay; // The rule controller
    GameUIControl GUC; //Monager of the UI

    // The following are variables for setting up the grid on screen
    public int spacing = 2; // THe amount of pixel separation between the locks

    public Level currentlevel = new Level(); // The level info for the current level

    static public bool lose = false; // Defeat Flag
    static public bool win = false; //You beat the level
    static public bool victory = false; // YOu beat the Vault
    public float adjustY = .66f;
    public float adjustX = .66f;
    
    public AudioSource[] sounds;
    public AudioSource explode;
    public AudioSource ding;

    private const int UPPERWALL = 0;
    private const int RIGHTWALL = 1;
    private const int BOTTOMWALL = 2;
    private const int LEFTWALL = 3;

    int MAX;

    int levCol;
    int levRow;
    int numsquares;

    // These will be where I place the level parts
    static public List <AnswerKey> answerKey = new List<AnswerKey>();
    static public List <WallList> wallList = new List<WallList>();
    static public List<GridSpace> gamegrid = new List<GridSpace>();

    bool drawLevel; //Does a new level need to be drawn?
    bool emg; // Does the grid need to emerge?
    
    public void InitializeDisplay()
    {
        ldatabase = GameObject.FindGameObjectWithTag("Level Database").GetComponent<LevelDatabase>();
        GUC = GameObject.Find("Canvas").transform.FindChild("Game UI").GetComponent<GameUIControl>();
        ruleDisplay = GameObject.Find("Canvas").transform.FindChild("Game UI/Rules Panel/Rules Container Panel").GetComponent<RuleDisplay>();        

        sounds = GetComponents<AudioSource>();
        explode = sounds[0];
        ding = sounds[1];

        levelnumber = 0;
        currentlevel = ldatabase.levels[levelnumber];
        answerKey = currentlevel.levAnswerKey;
        wallList = currentlevel.levWalls;
        gamegrid = currentlevel.levGameGrid;

        levCol = currentlevel.levCol;
        levRow = currentlevel.levRow;
        
        MAX = GlobalControl.control.NumOfLevels;
        
        drawLevel = true;
    }

    void Update()
    {

        if (drawLevel)
        {
            GUC.RefreshGameData(currentlevel.levAnswerKey.Count, currentlevel.levRuleData.Count);
            ruleDisplay.SetRuleList(currentlevel.levRuleData);
            //camCon.ResetCamera();
            DrawLevel();
        }
        // Grid now emerges!
        if (emg) Emerge();

        if (win) OnWin(); // The player beat the level
                
        if (lose) OnLoss();

        // if (victory) OnVictory(); 
    }

    void Emerge()
    {
        GameObject square;
        string tmpstr;
        for (int i = 0; i < numsquares; i++)
        {
            tmpstr = "Lock#" + i;
            square = GameObject.Find(tmpstr);
            if (square == null) print("GameObject not found");
            else square.GetComponent<LockScript>().Go();
        }
        emg = false;
    }

    void OnLoss()
    {
        print("You Answered WRONG!!");
        lose = false;
        ldatabase = new LevelDatabase(); //Erase the old game.
    }

    void OnWin()
    {
        // Show rules ******************************************************************

        // Destroy all the current grid objects
        GameObject square;
        string tmpstr;
                
        // Destroy all the locks and lockplates
        for (int i = 0; i < numsquares; i++)
        {
            tmpstr = "Lock#" + i;
            square = GameObject.Find(tmpstr);
            if (square == null) print("GameObject not found");
            Destroy(square);
        }

        // Destroy all the borders
        for (int i = 0; i < 12; i++)
        {
            tmpstr = "Side#" + i;
            square = GameObject.Find(tmpstr);
            if (square == null) print("GameObject not found");
            Destroy(square);
        }

        print("Win now set to false");
        win = false;
        levelnumber++;
        currentlevel = ldatabase.levels[levelnumber];
        answerKey = currentlevel.levAnswerKey;
        wallList = currentlevel.levWalls;
        gamegrid = currentlevel.levGameGrid;
        levCol = currentlevel.levCol;
        levRow = currentlevel.levRow;


        // See if the player can open the Vault
        if (levelnumber == MAX)
        {
            SceneManager.LoadScene("VaultVictory");
        }
        else
        {   
              drawLevel = true;
        }
        
    }

    void DrawLevel()
    {
        print("<b>NOW DRAWING LEVEL: " + levelnumber + "</b>");
                
        numsquares = levCol * levRow;

        StartY = ((levRow * spacing) / 2) - (spacing/2);
        StartX = - (((levCol * spacing) / 2) - (spacing/2));
        float xtmp = ((levCol * spacing) / 2) + 20;
        float ytmp = ((levRow * spacing) / 2) + 20;
        int Xdiff = Mathf.RoundToInt(xtmp);  
        int Ydiff = Mathf.RoundToInt(ytmp);
        
        float SideHeight = 15 + ((levRow * ((spacing + 5) / 4))); 
        float SideWidth = 15 + ((levCol * ((spacing + 5)/4))); 
              

        // ********************************************************************
        //                  Draw Sides 
        //                     
        //          First Calculate the width and height
        //          Then Calculate PLacement
        //          Get Color
        //          Instantiate and Scale

        // Calculate size
        int colornum = 0; // The numerical value of the color needed
        int num = 0; // The number assigned to the Side Part (Labeled on the Hierarchy as such)
        Vector3 leftpos = new Vector3();
        Vector3 sidepos = new Vector3();
        Vector3 rightpos = new Vector3();
        Vector3 rotator = new Vector3();
        Vector3 scaler = new Vector3();
        
        for (int i = 0; i < 4; i++)
        {
            //Upper Wall
            if (i == 0) 
            {
                colornum = currentlevel.levWalls[UPPERWALL].GetColorInt();
                leftpos = new Vector3(- (float)(Xdiff - 7.5), Ydiff, 0);
                sidepos = new Vector3(0, Ydiff, 0);
                rightpos = new Vector3(Xdiff, Ydiff, 0);
                rotator = new Vector3(0, 0, 0);
                scaler = new Vector3(SideWidth, 10, 10);
            }

            //Right Wall
            if (i == 1)
            {
                colornum = currentlevel.levWalls[RIGHTWALL].GetColorInt();
                leftpos = new Vector3(Xdiff, (float)(Ydiff - 7.5), 0);
                sidepos = new Vector3(Xdiff, 0, 0);
                rightpos = new Vector3(Xdiff, - Ydiff, 0);
                rotator = new Vector3(0, 0, 270);
                scaler = new Vector3(SideHeight, 10, 10);
            }

            //Bottom Wall
            if (i == 2) 
            {
                colornum = currentlevel.levWalls[BOTTOMWALL].GetColorInt();
                leftpos = new Vector3((float)(Xdiff - 7.5), - Ydiff, 0);
                sidepos = new Vector3(0, - Ydiff, 0);
                rightpos = new Vector3(- Xdiff, - Ydiff, 0);
                rotator = new Vector3(0, 0, 180);
                scaler = new Vector3(SideWidth, 10, 10);
            }

            //Left Wall
            if (i == 3)
            {
                colornum = currentlevel.levWalls[LEFTWALL].GetColorInt();
                leftpos = new Vector3(- Xdiff, - (float)(Ydiff - 7.5), 0);
                sidepos = new Vector3(- Xdiff, 0, 0);
                rightpos = new Vector3(- Xdiff, Ydiff, 0);
                rotator = new Vector3(0, 0, 90);
                scaler = new Vector3(SideHeight, 10, 10);
            }

            for (int j = 0; j < 3; j++)
            {
                // Calculate placement of 
                GameObject side = GetSidePart(colornum, j, num++);
                side.transform.Rotate(rotator);

                if (j == 0) side.transform.localPosition = leftpos;

                if (j == 1)
                {
                    side.transform.localPosition = sidepos;
                    side.transform.localScale = scaler;
                }

                if (j == 2) side.transform.localPosition = rightpos;
                                                                    
            }
        } // End Side making for loop
        
        
        
        //*********************************************************************
        //                  Draw Grid
           
        GameObject go;
        string tmp = "";
        print("Drawing the Grid");

        foreach (GridSpace gs in gamegrid)
        {
            Color ak = Color.white;
            //Set up a position vector
            Vector3 pos = new Vector3(StartX + (gs.column * spacing), StartY - (gs.row * spacing), 0);

                
            //print("Lock " + gs.position + " is " + ColorTextulizer(gs.GetColor()) + ".");
            // Grab the Answer Key number if this is an answer space
            if (gs.answer)
            {
                foreach (AnswerKey tak in answerKey)
                {
                    if (tak.position == gs.position)
                    {
                        print("Answer at " + gs.position + " is " + ColorTextulizer(tak.GetColor()));
                        ak = tak.GetColor();
                        break;
                    }
                    
                }                
            }


            // Get the color of the space
            switch (gs.GetColorInt())
            {
                case 0: // White - Lock Plate
                    go = (GameObject)Instantiate(Resources.Load("LockPlate"), pos, Quaternion.identity);
                    tmp = "Lock#" + gs.position;
                    go.name = tmp;
                    break;
                case 1:
                    go = (GameObject)Instantiate(Resources.Load("BlackLock"), pos, Quaternion.identity);
                    go.GetComponent<LockScript>().SetLock(gs.position, gs.answer, ak);
                    tmp = "Lock#" + gs.position;
                    go.name = tmp;
                    break;
                case 2:
                    go = (GameObject)Instantiate(Resources.Load("BlueLock"), pos, Quaternion.identity);
                    go.GetComponent<LockScript>().SetLock(gs.position, gs.answer, ak);
                    tmp = "Lock#" + gs.position;
                    go.name = tmp;
                    break;
                case 3:
                    go = (GameObject)Instantiate(Resources.Load("GreenLock"), pos, Quaternion.identity);
                    go.GetComponent<LockScript>().SetLock(gs.position, gs.answer, ak);
                    tmp = "Lock#" + gs.position;
                    go.name = tmp;
                    break;
                case 4:
                    go = (GameObject)Instantiate(Resources.Load("RedLock"), pos, Quaternion.identity);
                    go.GetComponent<LockScript>().SetLock(gs.position, gs.answer, ak);
                    tmp = "Lock#" + gs.position;
                    go.name = tmp;
                    break;
                case 5:
                    go = (GameObject)Instantiate(Resources.Load("YellowLock"), pos, Quaternion.identity);
                    go.GetComponent<LockScript>().SetLock(gs.position, gs.answer, ak);
                    tmp = "Lock#" + gs.position;
                    go.name = tmp;
                    break;
                default:
                    print("Something wrong happened at GameDisplay");
                    break;
            }
         } //End Foreach gs

        emg = true;
         drawLevel = false;
    } // DrawLevel

    GameObject GetSidePart(int colornum, int sidenum, int posnum)
    {
        GameObject ret = null;
        
        Vector3 pos = new Vector3(0, 0, 0);
        switch (colornum)
        { 
            case 0:
                if (sidenum == 0) ret = (GameObject)Instantiate(Resources.Load("WhiteSideLeft"), pos, Quaternion.identity);
                if (sidenum == 1) ret = (GameObject)Instantiate(Resources.Load("WhiteSide"), pos, Quaternion.identity);
                if (sidenum == 2) ret = (GameObject)Instantiate(Resources.Load("WhiteSideRight"), pos, Quaternion.identity);
                break;
            case 1:
                if (sidenum == 0) ret = (GameObject)Instantiate(Resources.Load("BlackSideLeft"), pos, Quaternion.identity);
                if (sidenum == 1) ret = (GameObject)Instantiate(Resources.Load("BlackSide"), pos, Quaternion.identity);
                if (sidenum == 2) ret = (GameObject)Instantiate(Resources.Load("BlackSideRight"), pos, Quaternion.identity);
                break;
            case 2:
                if (sidenum == 0) ret = (GameObject)Instantiate(Resources.Load("BlueSideLeft"), pos, Quaternion.identity);
                if (sidenum == 1) ret = (GameObject)Instantiate(Resources.Load("BlueSide"), pos, Quaternion.identity);
                if (sidenum == 2) ret = (GameObject)Instantiate(Resources.Load("BlueSideRight"), pos, Quaternion.identity);
                break;
            case 3:
                if (sidenum == 0) ret = (GameObject)Instantiate(Resources.Load("GreenSideLeft"), pos, Quaternion.identity);
                if (sidenum == 1) ret = (GameObject)Instantiate(Resources.Load("GreenSide"), pos, Quaternion.identity);
                if (sidenum == 2) ret = (GameObject)Instantiate(Resources.Load("GreenSideRight"), pos, Quaternion.identity);
                break;
            case 4:
                if (sidenum == 0) ret = (GameObject)Instantiate(Resources.Load("RedSideLeft"), pos, Quaternion.identity);
                if (sidenum == 1) ret = (GameObject)Instantiate(Resources.Load("RedSide"), pos, Quaternion.identity);
                if (sidenum == 2) ret = (GameObject)Instantiate(Resources.Load("RedSideRight"), pos, Quaternion.identity);
                break;
            case 5:
                if (sidenum == 0) ret = (GameObject)Instantiate(Resources.Load("YellowSideLeft"), pos, Quaternion.identity);
                if (sidenum == 1) ret = (GameObject)Instantiate(Resources.Load("YellowSide"), pos, Quaternion.identity);
                if (sidenum == 2) ret = (GameObject)Instantiate(Resources.Load("YellowSideRight"), pos, Quaternion.identity);
                break;
            default :
                break;
        }

        if (ret == null)
        {
            print("Side part is null, we have an index problem");
            print("Colornum = " + colornum);
            print("Sidenum = " + sidenum);
            print("Posnum = " + posnum);
        }
        else
        {
            string tmp = "Side#" + posnum;
            ret.name = tmp;
        }        

        return ret;
    }
  
    int ColorToInt(Color cler)
    {
        if (cler == Color.white) return 0;
        if (cler == Color.black) return 1;
        if (cler == Color.blue) return 2;
        if (cler == Color.green) return 3;
        if (cler == Color.red) return 4;
        if (cler == Color.yellow) return 5;        

        return -1;
    }


    // This function returns an integer that is representative of that color
    int KeyToInt(Color cler)
    {
        if (cler == GameCreator03.Color1) return 1;
        if (cler == GameCreator03.Color2) return 2;
        if (cler == GameCreator03.Color3) return 3;
        if (cler == GameCreator03.Color4) return 4;
        if (cler == GameCreator03.Color5) return 5;

        print(cler);
        return -1;
    }

    // This is a function for the locks to check in their win.
    public void AnswerCheckIn(int id)
    {
        ding.Play();
        bool winner = false;
       //Determine if the input is the correct answer

        foreach (AnswerKey ak in answerKey)
        {
            if (ak.position == id)
            {
                ak.solved = true;
                winner = true;
            }
        }
        
        if (!winner)
        {
            print("OK, there was a winner checked in, but no corresponding id");
        }

        // Check to see if level has been cleared.
        if (currentlevel.LevelClearCheck()) win = true;
        
    }

    public void WrongAnswer(int id)
    {
        explode.Play();
        // A Wait would be nice here
    }

    // This function returns the text name of an input color.
    string ColorTextulizer(Color colour)
    {
        if (colour == Color.white) return "white";
        else if (colour == Color.black) return "black";
        else if (colour == Color.blue) return "blue";
        else if (colour == Color.green) return "green";
        else if (colour == Color.red) return "red";
        else if (colour == Color.yellow) return "yellow";
        else return "Input color is not recognized";
    }
}
